classdef analyzer < handle
    %ANALYZER class to do analysis of sweeps
    %   Analyzer will be created by input path, load data from "*_freq.csv","*_real.csv" and "*_imag.csv".
    %   Currently, only data1(real part) will be process, no analysis data from imagine part.

    properties
        name; % name of measurement, recording info of measurement
        timeStamp; % timestamp generated by measurement machine
        folder; % folder path of file
        timeArray; % loaded time of sweeps happen
        freqArray; % loaded matrix of frequency of all sweep points
        data1Array; % loaded matrix of data1(real parts) of all sweep points
    end

    methods

        function obj = analyzer(filePath)
            %ANALYZER Construct an instance of this class
            %   Load data from file, store them in properties, and analyze data loaded.

            if nargin < 1
                % if no file path inputted, use UI to get a path
                obj.folder = uigetdir(pwd, 'Select result folder');
            else
                % store input file path to property
                obj.folder = filePath;
            end

            % We use a magnifying camera to record position pictures, and name them with some property of experiment.
            % Without using camera, a .txt file also work same.
            % If none of this exist in the folder where data stored.
            % 'non-labeled data' will be the name shown on figure's title.
            measureName = dir([obj.folder, '\*.jpg']);

            if isempty(measureName)
                measureName = dir([obj.folder, '\*.txt']);

                if isempty(measureName)
                    obj.name = 'non-labeled data';
                else
                    obj.name = measureName.name(1:end - 4);
                end

            end

            % Record time stamps
            obj.timeStamp = obj.folder(end - 14:end);

            % Displaying what data loaded.(might need a separated function for this)
            disp('Analysis case created');
            disp(obj.folder);
            disp(obj.name);
        end

        function loadFile(obj)
            %loadFile Load time, frequency and data1(real part) file from files.
            %   This pack the long functions for data loading.

            % load frequency of each sweep points
            file = dir([obj.folder, '\*freq.csv']);
            readDate = csvread([file(1).folder, '\', file(1).name]);

            % Frequency of each sweep is stored for future function(DYNAMIC RANGE)
            % But current analyzer don't have dynamic range data.
            % So only one sweep's frequency is loaded.
            obj.freqArray = readDate(:, 2:end);

            % load real parts
            file = dir([obj.folder, '\*real.csv']);
            readDate = csvread([file(1).folder, '\', file(1).name]);
            % load all real part sweep points
            obj.data1Array = readDate(:, 2:end);

            % load time each sweep happens
            obj.timeArray = readDate(:, 1);
        end

        function saveResult(obj, rf, bw, qf)
            %saveResult Save analysis results in csv file.
            %   Store TABLE of resonate frequency(rf), bandwidth(bw), quality factor(qf) as csv file
            time = obj.timeArray;
            resonateFreq = rf;
            bandwidth = bw;
            qFactor = qf;
            T = table(time, resonateFreq, bandwidth, qFactor);
            writetable(T, [obj.folder, '/Results ', obj.name, '.csv'], 'Delimiter', ',', 'QuoteStrings', true);
        end

        function plotResult(obj, rf, bw, qf)
            %plotResult Plot analysis results on a figure.
            %   Plotting analysis results change by time. Currently only for 'RX' format setting.
            %   Need to be improved: change automatically if the measurement format change on parameterSetup changed @measurement
            figure();
            subplot(3, 1, 1);
            plot(obj.timeArray, rf);
            set(get(gca, 'XLabel'), 'String', 'time(s)');
            set(get(gca, 'YLabel'), 'String', 'Resonate Freq(Hz)');
            set(get(gca, 'Title'), 'String', 'Resonate frequency');
            grid on;
            subplot(3, 1, 2);
            plot(obj.timeArray, bw);
            set(get(gca, 'XLabel'), 'String', 'time(s)');
            set(get(gca, 'YLabel'), 'String', 'Bandwidth(hz)');
            set(get(gca, 'Title'), 'String', 'Bandwidth');
            grid on;
            subplot(3, 1, 3);
            plot(obj.timeArray, qf);
            set(get(gca, 'XLabel'), 'String', 'time(s)');
            set(get(gca, 'YLabel'), 'String', 'Q factor');
            set(get(gca, 'Title'), 'String', 'quality factor');
            grid on;
        end

        function saveResultFig(obj)
            %saveResultFig Save current figure as result plot.
            %   Only works when use after plotResult@analyzer.
            %   Otherwise, save a wrong figure with 'results'
            saveas(gcf, [obj.folder, '/', obj.name, 'results.png']);
            saveas(gcf, [obj.folder, '/', obj.name, 'results.fig']);
        end

        function saveCalibratedFig(obj)
            %saveCalibratedFig Save current figure as Calibrated sweep
            %   Only works when use after Calibrated sweeps plotted.
            %   Otherwise, save a wrong figure with 'Baseline Calibrated'
            saveas(gcf, [obj.folder, '/', obj.name, 'Baseline Calibrated.png']);
            saveas(gcf, [obj.folder, '/', obj.name, 'Baseline Calibrated.fig']);
        end

    end

end
