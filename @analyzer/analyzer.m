classdef analyzer < handle
    %ANALYZER class to do analysis of sweeps
    %   Detailed explanation goes here

    properties
        name; % name of measurement, recording info of measurement
        timeStamp; % timestamp generated by measurement machine
        folder; % folder path of file
        timeArray;
        freqArray;
        data1Array;
    end

    methods

        function obj = analyzer(filePath)
            %ANALYZER Construct an instance of this class
            %   Detailed explanation goes here
            if nargin < 1
                obj.folder = uigetdir(pwd, 'Select result folder');
            else
                obj.folder = filePath;
            end

            measureName = dir([obj.folder, '\*.jpg']);

            if isempty(measureName)
                measureName = dir([obj.folder, '\*.txt']);
            end

            obj.name = measureName.name(1:end - 4);
            obj.timeStamp = obj.folder(end - 14:end);
            disp('Analysis case created');
            disp(obj.folder);
            disp(obj.name);
        end

        function loadFile(obj)
            %loadFile Summary of this method goes here
            %   Detailed explanation goes here

            % load frequency of each sweep points
            file = dir([obj.folder, '\*freq.csv']);
            readDate = csvread([file(1).folder, '\', file(1).name]);
            % load frequency array
            obj.freqArray = readDate(:, 2:end);

            % load real parts
            file = dir([obj.folder, '\*real.csv']);
            readDate = csvread([file(1).folder, '\', file(1).name]);
            % load all real part sweep points
            obj.timeArray = readDate(:, 1);
            obj.data1Array = readDate(:, 2:end);
        end

        function saveResult(obj, rf, bw, qf)
            time = obj.timeArray;
            resonateFreq = rf;
            bandwidth = bw;
            qFactor = qf;
            T = table(time, resonateFreq, bandwidth, qFactor);
            writetable(T, [obj.folder, '/Results ', obj.name, '.csv'], 'Delimiter', ',', 'QuoteStrings', true);
        end

        function plotResult(obj, rf, bw, qf)
            figure();
            subplot(3, 1, 1);
            plot(obj.timeArray, rf);
            set(get(gca, 'XLabel'), 'String', 'time(s)');
            set(get(gca, 'YLabel'), 'String', 'Resonate Freq(Hz)');
            set(get(gca, 'Title'), 'String', 'Resonate frequency');
            grid on;
            subplot(3, 1, 2);
            plot(obj.timeArray, bw);
            set(get(gca, 'XLabel'), 'String', 'time(s)');
            set(get(gca, 'YLabel'), 'String', 'Bandwidth(hz)');
            set(get(gca, 'Title'), 'String', 'Bandwidth');
            grid on;
            subplot(3, 1, 3);
            plot(obj.timeArray, qf);
            set(get(gca, 'XLabel'), 'String', 'time(s)');
            set(get(gca, 'YLabel'), 'String', 'Q factor');
            set(get(gca, 'Title'), 'String', 'quality factor');
            grid on;
        end

        function saveResultFig(obj)
            saveas(gcf, [obj.folder, '/', obj.name, 'results.png']);
            saveas(gcf, [obj.folder, '/', obj.name, 'results.fig']);
        end

    end

end
